# foninhoiuri-kong/docker-compose.yml
version: '3.8'

services:
  # O serviço 'kong-database' foi removido, pois o Kong usará um PostgreSQL existente.

  # Serviço para executar as migrações do Kong.
  # Todas as configurações de DB são passadas diretamente no comando para garantir que sejam lidas.
  kong-migrations:
    image: kong:latest
    command: >
      sh -c "
        sleep 10;
        # Tenta criar o banco de dados 'kong' se ele não existir, usando credenciais e host diretos
        PGPASSWORD=postgres psql -h foninhoiuri-postgresql -U postgres -d postgres -tc 'SELECT 1 FROM pg_database WHERE datname = ''kong''' | grep -q 1 || PGPASSWORD=postgres psql -h foninhoiuri-postgresql -U postgres -d postgres -c 'CREATE DATABASE kong ENCODING UTF8 LC_COLLATE ''C'' LC_CTYPE ''C'' TEMPLATE template0;';
        
        # Executa as migrações do Kong, passando as variáveis de ambiente diretamente para o comando 'kong'
        KONG_DATABASE=postgres KONG_PG_HOST=foninhoiuri-postgresql KONG_PG_USER=postgres KONG_PG_PASSWORD=postgres KONG_PG_DATABASE=kong kong migrations bootstrap;
      "
    # O bloco 'environment' foi removido deste serviço para contornar o problema de parsing.
    restart: "no" # Garante que este serviço roda apenas uma vez com sucesso

  kong:
    image: kong:latest
    restart: unless-stopped
    depends_on:
      kong-migrations: # O Kong principal só inicia após as migrações terem sido concluídas
        condition: service_completed_successfully
    environment:
      # Variáveis de ambiente para o serviço Kong principal (este bloco é necessário para o Kong)
      KONG_DATABASE: postgres
      KONG_PG_HOST: foninhoiuri-postgresql
      KONG_PG_USER: postgres
      KONG_PG_PASSWORD: postgres
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001,0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000,0.0.0.0:8443 ssl
    ports:
      - "8000:8000/tcp" # Porta do proxy HTTP
      - "8443:8443/tcp" # Porta do proxy HTTPS
      - "8001:8001/tcp" # Porta da API Admin HTTP
      - "8444:8444/tcp" # Porta da API Admin HTTPS
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 5s
      timeout: 5s
      retries: 5
