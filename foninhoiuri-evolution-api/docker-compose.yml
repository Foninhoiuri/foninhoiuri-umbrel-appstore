version: '3.8'

services:
  app_proxy:
    image: atendai/evolution-api:latest
    container_name: evolution_proxy
    restart: always
    environment:
      APP_HOST: evolution_api
      APP_PORT: 8080
      PROXY_AUTH_ADD: "false"
      AUTHENTICATION_API_KEY: 63FvHHwNfjMzaj8UStNc96UTGQ94CRHY
      # Manter essas variáveis para o proxy, caso a imagem base espere.
      DATABASE_ENABLED: "false" # <--- AJUSTADO: Desabilita o banco de dados para o proxy
      # As variáveis DATABASE_PROVIDER e DATABASE_CONNECTION_URI podem ser removidas se DATABASE_ENABLED for false,
      # mas as manteremos por clareza caso a imagem as insista em ler.
      DATABASE_PROVIDER: "postgresql"
      DATABASE_CONNECTION_URI: postgresql://default:default@postgres:5432/default
      CACHE_REDIS_ENABLED: "true"
      CACHE_REDIS_URI: "redis://redis:6379/0"
    ports:
      - "8080:8080"
    command: ["npm", "run", "start:prod"] # Mantido para garantir que o servidor de produção inicie
    depends_on:
      evolution_api:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  evolution_api:
    image: atendai/evolution-api:latest
    container_name: evolution_api_instance
    restart: on-failure
    environment:
      - DATABASE_ENABLED=true # Este deve permanecer true para a API principal
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://default:default@postgres:5432/default
      - DATABASE_CONNECTION_DB_PREFIX_NAME=evo
      - DATABASE_SAVE_DATA_INSTANCE=false
      - DATABASE_SAVE_DATA_NEW_MESSAGE=false
      - DATABASE_SAVE_MESSAGE_UPDATE=false
      - DATABASE_SAVE_DATA_CONTACTS=false
      - DATABASE_SAVE_DATA_CHATS=false
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://redis:6379/0
    volumes:
      - ${APP_DATA_DIR}/data/evolution-api/store:/evolution/store
      - ${APP_DATA_DIR}/data/evolution-api/instances:/evolution/instances
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  postgres:
    image: postgres:latest
    container_name: evolution_postgres
    # ATENÇÃO: Ajuste a plataforma conforme a arquitetura do seu Umbrel OS (linux/arm64 para Raspberry Pi, por exemplo).
    # Se o seu Umbrel for ARM64, mude para: platform: linux/arm64
    platform: linux/amd64
    environment:
      POSTGRES_USER: default
      POSTGRES_PASSWORD: default
      POSTGRES_DB: default
    ports:
      - "5432:5432"
    volumes:
      - ${APP_DATA_DIR}/pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:latest
    container_name: evolution_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ${APP_DATA_DIR}/redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
