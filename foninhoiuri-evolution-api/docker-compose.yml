version: '3.8' # Garanta que a versão é compatível com o Redis
services:
  evolution-api:
    container_name: evolution_api
    image: atendai/evolution-api
    restart: on-failure
    environment:
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://default:default@postgres:5432/default
      - DATABASE_SAVE_DATA_INSTANCE=true
      - LOG_BAILEYS=trace
      - LOG_LEVEL=ERROR,WARN,DEBUG,INFO,LOG,VERBOSE,DARK,WEBHOOKS
      # NOVAS VARIÁVEIS DE AMBIENTE PARA O REDIS
      - REDIS_URL=redis://redis:6379/0 # ou REDIS_URL=redis://host_do_redis:porta/db (se não for no mesmo docker compose)
      - CACHE_DRIVER=redis # Se a sua aplicação espera esta variável
      - CACHE_REDIS_HOST=redis # Nome do serviço Redis no Docker Compose
      - CACHE_REDIS_PORT=6379  # Porta padrão do Redis
      # Se o Redis precisar de senha (altamente recomendado em produção, mas talvez não necessário em dev)
      # - CACHE_REDIS_PASSWORD=sua_senha_redis
    ports:
      - "8080:8080"
    env_file:
      - ${APP_DATA_DIR}/.env
    volumes:
      - ${APP_DATA_DIR}/evolution_store:/evolution/store
      - ${APP_DATA_DIR}/evolution_instances:/evolution/instances
    depends_on:
      postgres:
        condition: service_healthy
      redis: # Adicione a dependência no Redis
        condition: service_started # Use service_started para o Redis

  postgres:
    image: postgres:latest
    container_name: evolution_postgres
    environment:
      POSTGRES_USER: default
      POSTGRES_PASSWORD: default
      POSTGRES_DB: default
    ports:
      - "5432:5432"
    volumes:
      - ${APP_DATA_DIR}/pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  # NOVO SERVIÇO REDIS
  redis:
    image: redis:latest # Ou uma versão específica, ex: redis:7-alpine
    container_name: evolution_redis
    restart: always
    ports:
      - "6379:6379" # Mapeie a porta se precisar acessar de fora do Docker
    volumes:
      - ${APP_DATA_DIR}/redisdata:/data # Volume para persistir dados do Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
