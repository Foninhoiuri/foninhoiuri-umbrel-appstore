version: '3.8' # Garanta que a versão é compatível com o Redis
services:
  evolution-api:
    container_name: evolution_api
    image: atendai/evolution-api:latest
    restart: on-failure
    environment:
      - AUTHENTICATION_API_KEY=wBSKDHYiz1vqMAHQBxOW74zHLogqIqcL
      
      - REDIS_URL=redis://redis:6379/0
      - CACHE_DRIVER=redis
      - CACHE_REDIS_HOST=redis
      - CACHE_REDIS_PORT=6379
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URL=redis://redis:6379/0
      
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://default:default@postgres:5432/default
      - DATABASE_SAVE_DATA_INSTANCE=true
      
      - LOG_BAILEYS=trace
      - LOG_LEVEL=ERROR,WARN,DEBUG,INFO,LOG,VERBOSE,DARK,WEBHOOKS
      - SERVER_URL=http://umbrel.local
      
      - TZ=America/Sao_Paulo
    ports:
      - "8080:8080"
    volumes:
      - ${APP_DATA_DIR}/evolution_store:/evolution/store
      - ${APP_DATA_DIR}/evolution_instances:/evolution/instances
    depends_on:
      postgres:
        condition: service_healthy
      redis: # Adicione a dependência no Redis
        condition: service_started # Use service_started para o Redis

  postgres:
    image: postgres:latest
    container_name: evolution_postgres
    environment:
      POSTGRES_USER: default
      POSTGRES_PASSWORD: default
      POSTGRES_DB: default
    ports:
      - "5432:5432"
    volumes:
      - ${APP_DATA_DIR}/pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:latest
    container_name: evolution_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ${APP_DATA_DIR}/redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
