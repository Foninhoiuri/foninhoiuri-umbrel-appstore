version: '3.8'

services:
  evolutionapi:
    image: atendai/evolution-api:latest
    container_name: evolutionapi
    ports:
      - "8080:8080" # Assumindo que a API roda na porta 8080
    environment:
      # Estas são exemplos baseados no arquivo .env.example
      # Você deve personalizá-los com seus valores reais
      - SERVER_TYPE=http
      - SERVER_PORT=8080
      - SERVER_URL=http://localhost:8080
      - SENTRY_DSN=
      - CORS_ORIGIN=*
      - CORS_METHODS=GET,POST,PUT,DELETE
      - CORS_CREDENTIALS=true
      - LOG_LEVEL=ERROR,WARN,DEBUG,INFO,LOG
      - LOG_COLOR=true
      - LOG_BAILEYS=error
      - EVENT_EMITTER_MAX_LISTENERS=50
      - DEL_INSTANCE=false
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION=postgresql://user:password@postgres:5432/evolutionapi # HOSTNAME ALTERADO PARA 'postgres'
    volumes:
      # Se você precisar de armazenamento persistente para qualquer dado (ex: sessões, mídia)
      # Descomente e ajuste estas linhas
      # - ./data/evolutionapi:/app/data # Exemplo para um volume de dados
    depends_on:
      - postgres # DEPENDÊNCIA ALTERADA PARA 'postgres'
    restart: unless-stopped

  postgres: # NOME DO SERVIÇO ALTERADO DE 'db' PARA 'postgres'
    image: postgres:13-alpine # Ou mysql:latest se você estiver usando MySQL
    container_name: evolutionapi_db # O nome do contêiner pode permanecer como 'evolutionapi_db' ou ser alterado para 'evolutionapi_postgres'
    environment:
      POSTGRES_DB: evolutionapi
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data # Volume persistente para dados do banco de dados (nome do volume ajustado para consistência)
    expose:
      - "5432" # Expõe a outros serviços na rede Docker, mas não diretamente ao host
    restart: unless-stopped

volumes:
  postgres_data: # Volume para dados do PostgreSQL (nome do volume ajustado para consistência)
